# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
RSpec.describe '/posts', type: :request do
  describe 'GET /index' do
    it 'renders a successful response' do
      create(:post)
      get posts_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      post = create(:post)
      get post_url(post)
      expect(response).to be_successful
    end
  end
end

RSpec.describe '/posts', type: :request do
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  before do
    @user = create(:user)
    sign_in @user
  end

  let(:valid_attributes) do
    {
      title: "Some awesome post",
      content: "Great content"
    }
  end

  let(:invalid_attributes) do
    {
      published_date: 3.years.ago
    }
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      post = create(:post, user_id: @user.id)
      get edit_post_url(post)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Post' do
        expect do
          post posts_url, params: { post: valid_attributes }
        end.to change(Post, :count).by(1)
      end

      it 'redirects to the created post' do
        post posts_url, params: { post: valid_attributes }
        expect(response).to redirect_to(post_url(Post.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Post' do
        expect do
          post posts_url, params: { post: invalid_attributes }
        end.to change(Post, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post posts_url, params: { post: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: "Test Title",
          content: "Test Content",
          published_date: 3.days.ago
        }
      end

      it 'updates the requested post' do
        post = create(:post, user_id: @user.id)
        patch post_url(post), params: { post: new_attributes }
        post.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the post' do
        post = create(:post, user_id: @user.id)
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

  end

  describe 'DELETE /destroy' do
    it 'destroys the requested post' do
      post = create(:post, user_id: @user.id)
      expect do
        delete post_url(post)
      end.to change(Post, :count).by(-1)
    end

    it 'redirects to the posts list' do
      post = create(:post, user_id: @user.id)
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
